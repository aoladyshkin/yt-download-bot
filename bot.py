import os
import uuid
from pathlib import Path

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler

from yt_downloader import process_youtube_url, get_video_streams

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
DOWNLOAD_DIR = Path("downloads")
DOWNLOAD_DIR.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è."
    )


async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞."""
    message = update.message
    if not message.text or ("youtube.com/" not in message.text and "youtu.be/" not in message.text):
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.")
        return

    url = message.text
    sent_message = await message.reply_text("üîé –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")

    try:
        streams, title = get_video_streams(url)
        
        if not streams:
            await sent_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            return

        keyboard = []
        # Store URL in user_data with a unique key for this request
        url_key = str(uuid.uuid4())
        context.user_data[url_key] = url

        for stream in streams:
            filesize_mb = stream.get('filesize', 0) / 1_048_576
            if stream['type'] == 'video':
                text = f"üìπ {stream['resolution']} ({filesize_mb:.1f} MB)"
            else:  # audio
                text = f"üéµ {stream['abr']} ({filesize_mb:.1f} MB)"
            
            callback_data = f"{stream['itag']}:{url_key}"
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])

        if not keyboard:
            await sent_message.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (mp4, –¥–æ 720p).")
            return

        reply_markup = InlineKeyboardMarkup(keyboard)
        await sent_message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∏–¥–µ–æ "{title}":', reply_markup=reply_markup)

    except Exception as e:
        await sent_message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")


async def download_selection(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞."""
    query = update.callback_query
    await query.answer()

    try:
        itag_str, url_key = query.data.split(":", 1)
        itag = int(itag_str)
        url = context.user_data.get(url_key)

        if not url:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
            return
        
        # Re-fetch streams to get details of the selected format
        streams, _ = get_video_streams(url)
        selected_format_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
        for stream_info in streams:
            if stream_info['itag'] == itag:
                if stream_info['type'] == 'video':
                    selected_format_text = f"üìπ {stream_info['resolution']}"
                else:
                    selected_format_text = f"üéµ {stream_info['abr']}"
                break

        await query.edit_message_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ({selected_format_text})... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

        output_path = process_youtube_url(url, DOWNLOAD_DIR, itag=itag)

        if not output_path or not Path(output_path).exists():
             await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")
             return

        file_size = os.path.getsize(output_path)
        if file_size > 2 * 1024 * 1024 * 1024:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (–±–æ–ª—å—à–µ 2 –ì–ë).")
            return

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–∏–Ω–æ–≥–¥–∞ —ç–∫–∑–æ—Ç–∏–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –ª–æ–º–∞–µ—Ç multipart)
        safe_name = Path(output_path).name.encode('utf-8', 'ignore').decode('utf-8')

        logger.info(f"Attempting to send video: {output_path} to chat_id: {query.message.chat_id}")
        await query.edit_message_text("‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")

        logger.info("Starting video upload...")

        # –í–ê–ñ–ù–û: –¥–µ—Ä–∂–∏–º —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–∞ –≤—Ä–µ–º—è await,
        # –∏ —Å—Ç–∞–≤–∏–º read_file_handle=False –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
        with open(output_path, "rb") as fh:
            video_if = InputFile(fh, filename=safe_name)
            await context.bot.send_video(
                chat_id=query.message.chat_id,
                video=video_if,
                supports_streaming=True,
                read_timeout=3600,
                write_timeout=3600,
                connect_timeout=3600,
            )
        logger.info("Video sent OK")
        try:
            os.remove(output_path)
        except Exception:
            logger.warning("Temp file remove failed", exc_info=True)
        await query.edit_message_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")

    except Exception as e:
        logger.exception(f"Error during download_selection for query data: {query.data}")
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        if len(error_message) > 400:
            error_message = error_message[:400] + "..."
        await query.edit_message_text(error_message)
    finally:
        # Clean up user_data
        if 'url_key' in locals() and url_key in context.user_data:
            del context.user_data[url_key]


async def post_init(application: Application) -> None:
    """Post initialization hook for the bot."""
    await application.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    ])


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).post_init(post_init).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(download_selection))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()
