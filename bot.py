import os
import uuid
import asyncio
from collections import deque
from pathlib import Path

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler

from yt_downloader import get_video_streams
from balance import get_balance, update_balance, calculate_video_cost
from queue_manager import add_to_queue, queue_processor

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
DOWNLOAD_DIR = Path("downloads")
DOWNLOAD_DIR.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –±–∞–ª–∞–Ω—Å."""
    user_id = update.message.from_user.id
    balance = get_balance(user_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.\n" 
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤."
    )

async def balance_command(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.message.from_user.id
    balance = get_balance(user_id)
    await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤.")


async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞."""
    message = update.message
    if not message.text or ("youtube.com/" not in message.text and "youtu.be/" not in message.text):
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.")
        return

    url = message.text
    sent_message = await message.reply_text("üîé –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")

    try:
        streams, title = get_video_streams(url)
        
        if not streams:
            await sent_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            return

        keyboard = []
        url_key = str(uuid.uuid4())
        context.user_data[url_key] = url

        for stream in streams:
            filesize_mb = stream.get('filesize', 0) / 1_048_576
            cost = 0
            if stream['type'] == 'video':
                try:
                    cost = calculate_video_cost(stream['resolution'], int(filesize_mb))
                except (ValueError, IndexError):
                    cost = 1 # Fallback cost
                text = f"üìπ {stream['resolution']} ({filesize_mb:.1f} MB) - {f'{cost} –∫—Ä–µ–¥.' if cost > 0 else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ üí∏'}"
            else:  # audio
                cost = max(1, int(filesize_mb // 50) + 1)
                text = f"üéµ {stream['abr']} ({filesize_mb:.1f} MB) - {cost} –∫—Ä–µ–¥."
            
            callback_data = f"{stream['itag']}:{cost}:{url_key}"
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])

        if not keyboard:
            await sent_message.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (mp4, –¥–æ 720p).")
            return

        reply_markup = InlineKeyboardMarkup(keyboard)
        user_id = message.from_user.id
        balance = get_balance(user_id)
        await sent_message.edit_text(
            f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∏–¥–µ–æ "{title}":\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤.', 
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Error in handle_message: {e}", exc_info=True)
        await sent_message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")


async def download_selection(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å."""
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    try:
        itag_str, cost_str, url_key = query.data.split(":", 2)
        itag = int(itag_str)
        cost = int(cost_str)
        
        url = context.user_data.get(url_key)

        if not url:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
            return

        current_balance = get_balance(user_id)
        if current_balance < cost:
            await query.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {current_balance}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}."
            )
            return

        if not update_balance(user_id, cost):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        streams, _ = get_video_streams(url)
        selected_format_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
        for stream_info in streams:
            if stream_info['itag'] == itag:
                filesize_mb = stream_info.get('filesize', 0) / 1_048_576
                if stream_info['type'] == 'video':
                    selected_format_text = f"üìπ {stream_info['resolution']} | {filesize_mb:.1f} MB"
                else:
                    selected_format_text = f"üéµ {stream_info['abr']} | {filesize_mb:.1f} MB"
                break
        
        queue_len = add_to_queue(context, query.message.chat_id, query.message.message_id, url, itag, selected_format_text)

        new_balance = get_balance(user_id)
        await query.edit_message_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –ú–µ—Å—Ç–æ: {queue_len}\n"
            f"–°–ø–∏—Å–∞–Ω–æ {cost} –∫—Ä–µ–¥–∏—Ç–æ–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}."
        )

        if url_key in context.user_data:
            del context.user_data[url_key]

    except Exception as e:
        logger.exception(f"Error in download_selection for query data: {query.data}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")


async def post_init(application: Application) -> None:
    """Post initialization hook for the bot."""
    await application.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("balance", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
    ])
    application.bot_data['download_queue'] = deque()
    asyncio.create_task(queue_processor(application))


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).post_init(post_init).base_url("http://telegram-bot-api:8081/bot").base_file_url("http://telegram-bot-api:8081/file/bot").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(download_selection))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()
