import os
import uuid
import asyncio
from collections import deque
from pathlib import Path

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, LabeledPrice
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler, PreCheckoutQueryHandler

from yt_downloader import get_video_streams
from balance import get_balance, update_balance, calculate_video_cost, add_balance
from queue_manager import add_to_queue, queue_processor

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
DOWNLOAD_DIR = Path("downloads")
DOWNLOAD_DIR.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–∞–∫–µ—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
TOPUP_PACKAGES = [
    {"credits": 100, "stars": 50},
    {"credits": 200, "stars": 90},
    {"credits": 300, "stars": 130},
]


async def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –±–∞–ª–∞–Ω—Å."""
    user_id = update.message.from_user.id
    balance = get_balance(user_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.\n" 
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤."
    )

async def balance_command(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.message.from_user.id
    balance = get_balance(user_id)
    await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤.")


async def topup_command(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."""
    keyboard = []
    for i, package in enumerate(TOPUP_PACKAGES):
        text = f"{package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {package['stars']} –∑–≤—ë–∑–¥"
        callback_data = f"topup:{i}"
        keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=reply_markup)


async def select_package_handler(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞."""
    query = update.callback_query
    await query.answer()

    try:
        _, package_index_str = query.data.split(":")
        package_index = int(package_index_str)
        package = TOPUP_PACKAGES[package_index]

        title = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤"
        description = f"–ü–æ–∫—É–ø–∫–∞ {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {package['stars']} –∑–≤—ë–∑–¥ Telegram Stars"
        payload = f"topup_{package['credits']}_{package['stars']}"
        currency = "XTR"
        prices = [LabeledPrice(label=f"{package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤", amount=package['stars'])]

        await context.bot.send_invoice(
            chat_id=query.message.chat_id,
            title=title,
            description=description,
            payload=payload,
            provider_token=None,  # –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è Telegram Stars
            currency=currency,
            prices=prices
        )
    except (IndexError, ValueError) as e:
        logger.error(f"Error in select_package_handler: {e}", exc_info=True)
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def precheckout_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç pre-checkout –∑–∞–ø—Ä–æ—Å—ã."""
    query = update.pre_checkout_query
    if query.invoice_payload.startswith("topup_"):
        await query.answer(ok=True)
    else:
        await query.answer(ok=False, error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")


async def successful_payment_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏."""
    payment_info = update.message.successful_payment
    payload = payment_info.invoice_payload
    
    if payload.startswith("topup_"):
        _, credits_str, _ = payload.split("_")
        credits_to_add = int(credits_str)
        user_id = update.message.from_user.id
        
        add_balance(user_id, credits_to_add)
        new_balance = get_balance(user_id)
        
        await update.message.reply_text(
            f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {credits_to_add} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤."
        )


async def show_format_selection(update: Update, context: CallbackContext, url: str, message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–∞."""
    try:
        streams, title = get_video_streams(url)
        
        if not streams:
            await message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            return

        keyboard = []
        url_key = str(uuid.uuid4())
        context.user_data[url_key] = url

        for stream in streams:
            filesize_mb = stream.get('filesize', 0) / 1_048_576
            cost = 0
            if stream['type'] == 'video':
                try:
                    cost = calculate_video_cost(stream['resolution'], int(filesize_mb))
                except (ValueError, IndexError):
                    cost = 1 # Fallback cost
                text = f"üìπ {stream['resolution']} ({filesize_mb:.1f} MB) - {f'{cost} –∫—Ä–µ–¥.' if cost > 0 else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ üí∏'}"
            else:  # audio
                cost = max(1, int(filesize_mb // 50) + 1)
                text = f"üéµ {stream['abr']} ({filesize_mb:.1f} MB) - {cost} –∫—Ä–µ–¥."
            
            callback_data = f"select:{stream['itag']}:{cost}:{url_key}"
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])

        if not keyboard:
            await message.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (mp4, –¥–æ 720p).")
            return

        reply_markup = InlineKeyboardMarkup(keyboard)
        user_id = update.effective_user.id
        balance = get_balance(user_id)
        await message.edit_text(
            f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∏–¥–µ–æ "{title}":\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤.', 
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Error in show_format_selection: {e}", exc_info=True)
        await message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")


async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞."""
    message = update.message
    if not message.text or ("youtube.com/" not in message.text and "youtu.be/" not in message.text):
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.")
        return

    url = message.text
    sent_message = await message.reply_text("üîé –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
    await show_format_selection(update, context, url, sent_message)


async def ask_for_confirmation(update: Update, context: CallbackContext) -> None:
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()

    try:
        _, itag_str, cost_str, url_key = query.data.split(":", 3)
        cost = int(cost_str)
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{itag_str}:{cost_str}:{url_key}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel:0:0:{url_key}"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {cost} –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Error in ask_for_confirmation: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def process_confirmation(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    try:
        action, itag_str, cost_str, url_key = query.data.split(":")
        
        if action == "cancel":
            url = context.user_data.get(url_key)
            if not url:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
                return
            await show_format_selection(update, context, url, query.message)
            return

        if action == "confirm":
            itag = int(itag_str)
            cost = int(cost_str)
            
            url = context.user_data.get(url_key)
            if not url:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
                return

            current_balance = get_balance(user_id)
            if current_balance < cost:
                await query.edit_message_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {current_balance}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}."
                )
                return

            if not update_balance(user_id, cost):
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            streams, _ = get_video_streams(url)
            selected_format_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
            for stream_info in streams:
                if stream_info['itag'] == itag:
                    filesize_mb = stream_info.get('filesize', 0) / 1_048_576
                    if stream_info['type'] == 'video':
                        selected_format_text = f"üìπ {stream_info['resolution']} | {filesize_mb:.1f} MB"
                    else:
                        selected_format_text = f"üéµ {stream_info['abr']} | {filesize_mb:.1f} MB"
                    break
            
            queue_len = add_to_queue(context, query.message.chat_id, query.message.message_id, url, itag, selected_format_text)

            new_balance = get_balance(user_id)
            await query.edit_message_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –ú–µ—Å—Ç–æ: {queue_len}\n"
                f"–°–ø–∏—Å–∞–Ω–æ {cost} –∫—Ä–µ–¥–∏—Ç–æ–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}."
            )

            if url_key in context.user_data:
                del context.user_data[url_key]

    except Exception as e:
        logger.exception(f"Error in process_confirmation for query data: {query.data}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞: {e}")


async def post_init(application: Application) -> None:
    """Post initialization hook for the bot."""
    await application.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("balance", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand("topup", "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
    ])
    application.bot_data['download_queue'] = deque()
    asyncio.create_task(queue_processor(application))


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).post_init(post_init).base_url("http://telegram-bot-api:8081/bot").base_file_url("http://telegram-bot-api:8081/file/bot").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance_command))
    application.add_handler(CommandHandler("topup", topup_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    application.add_handler(CallbackQueryHandler(ask_for_confirmation, pattern="^select:"))
    application.add_handler(CallbackQueryHandler(process_confirmation, pattern="^(confirm|cancel):"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    application.add_handler(CallbackQueryHandler(select_package_handler, pattern="^topup:"))
    application.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()